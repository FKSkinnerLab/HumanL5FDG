PARAcelsius=34
PARAM_v_init=-72
v_init=PARAM_v_init
PARAM_tstop = 10000

PARAM_ic_hold_amp=0

PARAM_ic_clamp_del=1164.7
PARAM_ic_clamp_dur=599
PARAM_ic_clamp_amp=0.3

cvode_active(1)
cvode.atol(1e-05)


tstop=PARAM_tstop
v_init=PARAM_v_init

objref Zap
objref time
objref voltage
objref zapcurrent
objref current
objref save_time, save_voltage, save_zapcurrent, save_current
strdef title_time, title_voltage, title_zapcurrent, title_current
objref NoiseFile
objref NoiseVector
strdef noiseinput
strdef noiseinputmult
objref pw 
pw= new PWManager()

objref ic_hold
access L5PCtemplate[0].soma[0]
ic_hold = new IClamp(0.5)

objref ic_clamp
access L5PCtemplate[0].soma[0]
ic_clamp = new IClamp(0.5)

Ihold= PARAM_ic_hold_amp
Iclamp= PARAM_ic_clamp_amp

ic_hold.del = 0
ic_hold.dur = PARAM_tstop
ic_hold.amp = Ihold

ic_clamp.del = PARAM_ic_clamp_del
ic_clamp.dur = PARAM_ic_clamp_dur
ic_clamp.amp = Iclamp




proc block_Ih() {
	gIhbar_Ih = 0
}





proc setclamp() {
	Iclamp= $1
	ic_clamp.amp=Iclamp
}



proc setizap_DC() {
	tstop=$1+$2

	setclamp($6)
	ic_clamp.del=0
	ic_clamp.dur=tstop

	access L5PCtemplate[0].soma[0]
	Zap= new Izap(0.5)
	
	Zap.del=$1
	Zap.dur=$2
	Zap.f0=$3
	Zap.f1=$4
	Zap.amp=$5

}

proc recordizap_DC() {
	setizap_DC($1,$2,$3,$4,$5,$6)	
	

	time= new Vector()
	voltage= new Vector()
	zapcurrent= new Vector()

	time.record(&t)
	voltage.record(&L5PCtemplate[0].soma[0].v(0.5))
	zapcurrent.record(&Zap.i)

	run()

	save_time= new File()
	save_voltage= new File()
	save_zapcurrent= new File()

	/*
	sprint(title_time, "ZapData_HayReplaceH_time_%d_%d_%d_%d_%d.csv", Zap.f0, Zap.f1, Zap.amp*100, Zap.dur, ic_clamp.amp*100)
	sprint(title_voltage, "ZapData_HayReplaceH_voltage_%d_%d_%d_%d_%d.csv", Zap.f0, Zap.f1, Zap.amp*100, Zap.dur, ic_clamp.amp*100)
	sprint(title_zapcurrent, "ZapData_HayReplaceH_zapcurrent_%d_%d_%d_%d_%d.csv", Zap.f0, Zap.f1, Zap.amp*100, Zap.dur, ic_clamp.amp*100)
	*/

	sprint(title_time, "ZapData_Hay_time_%d_%d_%d_%d_%d.csv", Zap.f0, Zap.f1, Zap.amp*100, Zap.dur, ic_clamp.amp*100)
	sprint(title_voltage, "ZapData_Hay_voltage_%d_%d_%d_%d_%d.csv", Zap.f0, Zap.f1, Zap.amp*100, Zap.dur, ic_clamp.amp*100)
	sprint(title_zapcurrent, "ZapData_Hay_zapcurrent_%d_%d_%d_%d_%d.csv", Zap.f0, Zap.f1, Zap.amp*100, Zap.dur, ic_clamp.amp*100)



	save_time.wopen(title_time)
	save_voltage.wopen(title_voltage)
	save_zapcurrent.wopen(title_zapcurrent)

	time.printf(save_time)
	voltage.printf(save_voltage)
	zapcurrent.printf(save_zapcurrent)

	save_time.close()
	save_voltage.close()
	save_zapcurrent.close()

	tstop=PARAM_tstop
}

/*
proc SwapToKole() {
	forsec somatic {
		insert Ih
		gIhbar_Ih_me= 0
		gIhbar_Ih= 0.0002
	}
	
	forsec apical {
		dist=distance(.5)
		insert Ih
		gIhbar_Ih_me= 0
	}
	$o1.distribute_channels("apic","gIhbar_Ih" 2,-0.8696,3.6161,0.0,2.0870,0.00020000000) 

	
	forsec basal {
		insert Ih
		gIhbar_Ih_me= 0
		gIhbar_Ih = 0.0002
	}
}

proc ResetHChannel() {
	forsec Soma {
		gIhbar_Ih_me = 0.0002
		gIhbar_Ih = 0
	}
	
	forsec Apical {
		dist=distance(.5)
 		gIhbar_Ih = 0
	}
	$o1.distribute_channels("apic","gIhbar_Ih_me" 2,-0.8696,3.6161,0.0,2.0870,0.00020000000) 

	
	forsec Basilar {
		gIhbar_Ih_me = 0.0002
		gIhbar_Ih =0
	}

}
*/

proc noiserun() {
	cvode.active(0)
	dt= $2
	tstop=$3
	numstep=tstop/dt
	NoiseFile= new File()
	NoiseVector= new Vector(numstep)
	NoiseVector
	sprint(noiseinput, "%s.dat", $s1)
	NoiseFile.ropen(noiseinput)
	for i=1, numstep {
		NoiseVector.x[i-1]=$4+NoiseFile.scanvar() 
	}
	
	ic_clamp.del=0
	ic_clamp.dur=1e9
	NoiseVector.play(&ic_clamp.amp, dt)
	time= new Vector()
	voltage= new Vector()
	current= new Vector()
	time.record(&t)
	voltage.record(&L5PCtemplate[0].soma[0].v(0.5))
	current.record(&ic_clamp.i)
	run()

	save_time= new File()
	save_voltage= new File()
	save_current= new File()
	sprint(title_time, "NoiseData_time_%s.csv", $s1)
	sprint(title_voltage, "NoiseData_voltage_%s.csv", $s1)
	sprint(title_current, "NoiseData_current_%s.csv", $s1)
	save_time.wopen(title_time)
	save_voltage.wopen(title_voltage)
	save_current.wopen(title_current)
	time.printf(save_time)
	voltage.printf(save_voltage)
	current.printf(save_current)
	save_time.close()
	save_voltage.close()
	save_current.close()

	cvode.active(1)
	tstop=PARAM_tstop
	NoiseVector.play_remove()
	ic_clamp.del = PARAM_ic_clamp_del
	ic_clamp.dur = PARAM_ic_clamp_dur
	ic_clamp.amp = Iclamp
}
